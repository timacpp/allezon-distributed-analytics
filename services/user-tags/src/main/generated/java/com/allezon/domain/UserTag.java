/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.allezon.domain;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserTag extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1459219876165171966L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserTag\",\"namespace\":\"com.allezon.domain\",\"fields\":[{\"name\":\"time\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"cookie\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"device\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"DeviceType\",\"symbols\":[\"PC\",\"MOBILE\",\"TV\"]}]},{\"name\":\"action\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"ActionType\",\"symbols\":[\"VIEW\",\"BUY\"]}]},{\"name\":\"product_info\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"product_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"brand_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"category_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"price\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserTag> ENCODER =
      new BinaryMessageEncoder<UserTag>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserTag> DECODER =
      new BinaryMessageDecoder<UserTag>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserTag> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserTag> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserTag> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserTag>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserTag to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserTag from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserTag instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserTag fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String time;
  @Deprecated public java.lang.String cookie;
  @Deprecated public java.lang.String country;
  @Deprecated public com.allezon.domain.DeviceType device;
  @Deprecated public com.allezon.domain.ActionType action;
  @Deprecated public com.allezon.domain.Product product_info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserTag() {}

  /**
   * All-args constructor.
   * @param time The new value for time
   * @param cookie The new value for cookie
   * @param country The new value for country
   * @param device The new value for device
   * @param action The new value for action
   * @param product_info The new value for product_info
   */
  public UserTag(java.lang.String time, java.lang.String cookie, java.lang.String country, com.allezon.domain.DeviceType device, com.allezon.domain.ActionType action, com.allezon.domain.Product product_info) {
    this.time = time;
    this.cookie = cookie;
    this.country = country;
    this.device = device;
    this.action = action;
    this.product_info = product_info;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return cookie;
    case 2: return country;
    case 3: return device;
    case 4: return action;
    case 5: return product_info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.String)value$; break;
    case 1: cookie = (java.lang.String)value$; break;
    case 2: country = (java.lang.String)value$; break;
    case 3: device = (com.allezon.domain.DeviceType)value$; break;
    case 4: action = (com.allezon.domain.ActionType)value$; break;
    case 5: product_info = (com.allezon.domain.Product)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.String getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.String value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'cookie' field.
   * @return The value of the 'cookie' field.
   */
  public java.lang.String getCookie() {
    return cookie;
  }


  /**
   * Sets the value of the 'cookie' field.
   * @param value the value to set.
   */
  public void setCookie(java.lang.String value) {
    this.cookie = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'device' field.
   * @return The value of the 'device' field.
   */
  public com.allezon.domain.DeviceType getDevice() {
    return device;
  }


  /**
   * Sets the value of the 'device' field.
   * @param value the value to set.
   */
  public void setDevice(com.allezon.domain.DeviceType value) {
    this.device = value;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public com.allezon.domain.ActionType getAction() {
    return action;
  }


  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public void setAction(com.allezon.domain.ActionType value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'product_info' field.
   * @return The value of the 'product_info' field.
   */
  public com.allezon.domain.Product getProductInfo() {
    return product_info;
  }


  /**
   * Sets the value of the 'product_info' field.
   * @param value the value to set.
   */
  public void setProductInfo(com.allezon.domain.Product value) {
    this.product_info = value;
  }

  /**
   * Creates a new UserTag RecordBuilder.
   * @return A new UserTag RecordBuilder
   */
  public static com.allezon.domain.UserTag.Builder newBuilder() {
    return new com.allezon.domain.UserTag.Builder();
  }

  /**
   * Creates a new UserTag RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserTag RecordBuilder
   */
  public static com.allezon.domain.UserTag.Builder newBuilder(com.allezon.domain.UserTag.Builder other) {
    if (other == null) {
      return new com.allezon.domain.UserTag.Builder();
    } else {
      return new com.allezon.domain.UserTag.Builder(other);
    }
  }

  /**
   * Creates a new UserTag RecordBuilder by copying an existing UserTag instance.
   * @param other The existing instance to copy.
   * @return A new UserTag RecordBuilder
   */
  public static com.allezon.domain.UserTag.Builder newBuilder(com.allezon.domain.UserTag other) {
    if (other == null) {
      return new com.allezon.domain.UserTag.Builder();
    } else {
      return new com.allezon.domain.UserTag.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserTag instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserTag>
    implements org.apache.avro.data.RecordBuilder<UserTag> {

    private java.lang.String time;
    private java.lang.String cookie;
    private java.lang.String country;
    private com.allezon.domain.DeviceType device;
    private com.allezon.domain.ActionType action;
    private com.allezon.domain.Product product_info;
    private com.allezon.domain.Product.Builder product_infoBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.allezon.domain.UserTag.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.cookie)) {
        this.cookie = data().deepCopy(fields()[1].schema(), other.cookie);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.device)) {
        this.device = data().deepCopy(fields()[3].schema(), other.device);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.action)) {
        this.action = data().deepCopy(fields()[4].schema(), other.action);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.product_info)) {
        this.product_info = data().deepCopy(fields()[5].schema(), other.product_info);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasProductInfoBuilder()) {
        this.product_infoBuilder = com.allezon.domain.Product.newBuilder(other.getProductInfoBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing UserTag instance
     * @param other The existing instance to copy.
     */
    private Builder(com.allezon.domain.UserTag other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cookie)) {
        this.cookie = data().deepCopy(fields()[1].schema(), other.cookie);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.device)) {
        this.device = data().deepCopy(fields()[3].schema(), other.device);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.action)) {
        this.action = data().deepCopy(fields()[4].schema(), other.action);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.product_info)) {
        this.product_info = data().deepCopy(fields()[5].schema(), other.product_info);
        fieldSetFlags()[5] = true;
      }
      this.product_infoBuilder = null;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.String getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder setTime(java.lang.String value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder clearTime() {
      time = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cookie' field.
      * @return The value.
      */
    public java.lang.String getCookie() {
      return cookie;
    }


    /**
      * Sets the value of the 'cookie' field.
      * @param value The value of 'cookie'.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder setCookie(java.lang.String value) {
      validate(fields()[1], value);
      this.cookie = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cookie' field has been set.
      * @return True if the 'cookie' field has been set, false otherwise.
      */
    public boolean hasCookie() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cookie' field.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder clearCookie() {
      cookie = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder setCountry(java.lang.String value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder clearCountry() {
      country = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'device' field.
      * @return The value.
      */
    public com.allezon.domain.DeviceType getDevice() {
      return device;
    }


    /**
      * Sets the value of the 'device' field.
      * @param value The value of 'device'.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder setDevice(com.allezon.domain.DeviceType value) {
      validate(fields()[3], value);
      this.device = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'device' field has been set.
      * @return True if the 'device' field has been set, false otherwise.
      */
    public boolean hasDevice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'device' field.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder clearDevice() {
      device = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public com.allezon.domain.ActionType getAction() {
      return action;
    }


    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder setAction(com.allezon.domain.ActionType value) {
      validate(fields()[4], value);
      this.action = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder clearAction() {
      action = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_info' field.
      * @return The value.
      */
    public com.allezon.domain.Product getProductInfo() {
      return product_info;
    }


    /**
      * Sets the value of the 'product_info' field.
      * @param value The value of 'product_info'.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder setProductInfo(com.allezon.domain.Product value) {
      validate(fields()[5], value);
      this.product_infoBuilder = null;
      this.product_info = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'product_info' field has been set.
      * @return True if the 'product_info' field has been set, false otherwise.
      */
    public boolean hasProductInfo() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'product_info' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.allezon.domain.Product.Builder getProductInfoBuilder() {
      if (product_infoBuilder == null) {
        if (hasProductInfo()) {
          setProductInfoBuilder(com.allezon.domain.Product.newBuilder(product_info));
        } else {
          setProductInfoBuilder(com.allezon.domain.Product.newBuilder());
        }
      }
      return product_infoBuilder;
    }

    /**
     * Sets the Builder instance for the 'product_info' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.allezon.domain.UserTag.Builder setProductInfoBuilder(com.allezon.domain.Product.Builder value) {
      clearProductInfo();
      product_infoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'product_info' field has an active Builder instance
     * @return True if the 'product_info' field has an active Builder instance
     */
    public boolean hasProductInfoBuilder() {
      return product_infoBuilder != null;
    }

    /**
      * Clears the value of the 'product_info' field.
      * @return This builder.
      */
    public com.allezon.domain.UserTag.Builder clearProductInfo() {
      product_info = null;
      product_infoBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserTag build() {
      try {
        UserTag record = new UserTag();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.String) defaultValue(fields()[0]);
        record.cookie = fieldSetFlags()[1] ? this.cookie : (java.lang.String) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.String) defaultValue(fields()[2]);
        record.device = fieldSetFlags()[3] ? this.device : (com.allezon.domain.DeviceType) defaultValue(fields()[3]);
        record.action = fieldSetFlags()[4] ? this.action : (com.allezon.domain.ActionType) defaultValue(fields()[4]);
        if (product_infoBuilder != null) {
          try {
            record.product_info = this.product_infoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("product_info"));
            throw e;
          }
        } else {
          record.product_info = fieldSetFlags()[5] ? this.product_info : (com.allezon.domain.Product) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserTag>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserTag>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserTag>
    READER$ = (org.apache.avro.io.DatumReader<UserTag>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.time == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.time);
    }

    if (this.cookie == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.cookie);
    }

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.country);
    }

    if (this.device == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.device.ordinal());
    }

    if (this.action == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.action.ordinal());
    }

    if (this.product_info == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.product_info.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.time = null;
      } else {
        this.time = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.cookie = null;
      } else {
        this.cookie = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        this.country = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.device = null;
      } else {
        this.device = com.allezon.domain.DeviceType.values()[in.readEnum()];
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.action = null;
      } else {
        this.action = com.allezon.domain.ActionType.values()[in.readEnum()];
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.product_info = null;
      } else {
        if (this.product_info == null) {
          this.product_info = new com.allezon.domain.Product();
        }
        this.product_info.customDecode(in);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.time = null;
          } else {
            this.time = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.cookie = null;
          } else {
            this.cookie = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            this.country = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.device = null;
          } else {
            this.device = com.allezon.domain.DeviceType.values()[in.readEnum()];
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.action = null;
          } else {
            this.action = com.allezon.domain.ActionType.values()[in.readEnum()];
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.product_info = null;
          } else {
            if (this.product_info == null) {
              this.product_info = new com.allezon.domain.Product();
            }
            this.product_info.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










